javascript由三部分组成: ECMAScript DOM BOM

DOM(文档对象模型)：是针对XML但经过扩展用于HTML的应用程序编程接口(API。DOM把整个页面映射成为一个多层节点结构。开发人员获得了控制页面内容和结构的主动权，借助DOM提供的API，可以轻松自如地删除、添加、替换、或修改任何节点。
W3C制定了DOM标准。DOM1级由DOM核心和DOM HTML，DOM核心规定了如何映射基于XML的文档结构，以便简化对文档中任意部分的访问和操作。DOMHTML添加了针对HTML的对象和方法。

DOM2级引入了：
    DOM视图
    DOM事件
    DOM样式
    DOM遍历和范围

BOM：可以访问和操作浏览器窗口的浏览器对象模型。使用BOM可以控制浏览器显示的页面以外的部分。没有BOM标准

一、HTML中使用JavaScript
<script>定义了以下属性：
async：表示立即下载脚本，但不应妨碍页面中的其他操作，只对外部脚本有效。异步脚本不保证按照指定她们的先后顺序执行，两个异步脚本之间互不依赖很重要
defer：表示脚本可以延迟到文档完全被解析和显示之后执行，只对外部脚本有效。html5要求它们按照出现的先后顺序执行。
src：包含要执行代码的外部文件
type：表示脚本语言的内容类型。默认是text/javascript

解析嵌入式JavaScript代码和解析外部JavaScript文件时，页面的处理会暂停。

一般把<script>元素放在body内容下方，不然会等待JavaScript代码被下载、解析和执行完成后。才能开始显示页面内容。

外部代码强调如下优点：
    可维护性
    可缓存：浏览器能够根据具体的设置缓存链接的所有外部JavaScript文件
    适应未来

<noscript></noscript>中的内容只有在浏览器不支持脚本或者浏览器脚本被禁用才显示出来。

二、JavaScript基本概念

1、语法
   1.1、ECMAScript区分大小写
   1.2、标识符:指变量、函数、属性的名字，或者函数的参数
   1.3、严格模式：为JavaScript定义了一种不同的解析和执行模型，启动严格模式
   "use strict";
   1.4、保留字和关键字不能做标识符，关键字做标识符会抛出"identifier Expected"错误。
2、变量
   2.1、用var定义的变量将成为定义该变量作用域中的局部变量。比如在函数中用var定义的变量，在函数退出后就被销毁。如果要定义全局变量可以不用var
   function test(){
      message = 'hi';
   }
   test();
   alert(message);
   但是在严格模式中会抛出ReferenceError错误
3、数据类型
   有五种简单数据类型：undefined、Null、Boolean、Number和String
   一种复杂数据类型：object
   3.1、typeof操作符：检测给定变量的数据类型,可能返回以下字符串
     "undefined"--- 如果这个值未定义
     "number"--- 如果这个值是数值
     "string"--- 如果这个值是字符串
     "boolean"--- 如果这个值是布尔值
     "object"--- 如果这个值是对象或null
     "function"--- 如果这个值是函数
     !!!typeof是操作符不是函数 !!!
     Safari 5及之前版本、Chrome 7以及之前版本在对正则表达式调用typeof操作符会返回"function",而其他浏览器会返回"object"
   3.2、Undefined类型
     Undefined类型只有一个值，即undefined。在使用var声明变量但未对其加以初始化时，这个变量就是undefined。
     var message；
     alert(message == undefined); //true
     尚未初始化和尚未声明的变量不同，尚未声明的变量只能用typeof操作符检测数据类型。对未初始化的变量和未声明的变量执行typeof操作符都返回了undefined值，这个结果有逻辑合理性，因为都不能执行真正的操作。
   3.4、Null类型
     Null也是只有一个值，即null。从逻辑角度看，null值表示一个空对象指针，而这也正是使用typeof操作符返回”object“的原因。
     如果定义的变量在将来会保存某个值，最好初始化为null，这样一来，直接检查null值就可以知道相应的变量是否保存了一个对象引用。
     注意了，undefined值是派生自null值的，因此它们相等
     alert(null == undefined)
   3.5、Boolean类型
     该类型只有两个字面值：true和false。true不一定等于1，false不一定等于0
     true和false是区分大小写的，True和False是标识符，不是Boolean值
     对任何数据类型的值调用Boolean()函数，总会返回一个Boolean值。
     if()语句会自动执行相应的Boolean转换
   3.6、Number类型
     整数：十进制、十六进制(前两位0x)、八进制(第一位必须是0)的字面值表示
     八进制字面量在严格模式下是无效的，会导致支持的JavaScript引擎抛出错误
     3.6.1、浮点数
       该数值中必须包含一个小数点，并且小数点后面必须有一个数字。
       由于保存浮点数值需要的内存空间是整数值的两倍，因此ECMAScript会不失时机地将浮点数转换为整数值。
       对于那些极大或极小值，可以用e表示法(科学表示法)表示的浮点数值表示。
       var floatNumber = 3.124e10 即 3.124 * 10^10
       var floatNum = 3.124e-7 即 3.124 * 10^-7
     浮点数值的最高精度是17位小数，但在进行算数计算时其精度远远不如整数。0.1+0.2结果不是0.3，而是0.30000000000000004.
     永远不要测试某个特定的浮点数值
     3.6.2、数值范围
       由于内存的限制，ECMAScript并不能保存世界上所有的数值。
       能保存的最小数值保存在Number.MIN_VALUE中，即5e-324
       能保存的最大数值保存在Number.MAX_VALUE中，即1.7976931348623157e+308
       如果某次计算的结果得到了一个超出了JavaScript数值范围的值，那么这个数值将会转换为特殊的Infinity值。如果这个数值是负数，则会转换为-Infinity。如果是正数，则会转换为Infinity。这个特殊的值无法继续参与下一次计算。
       要想确定一个数值是否有穷，用isFinite()函数，在参数位于最大值和最小值之间会返回true
     3.6.3、NaN
       Not a Number 非数值是一个特殊的数值。这个数值用来表示一个本来要返回数值的操作数未返回数值的情况(这样就不会抛出错误)。在其他编程语言中，任何数值除以0都会导致错误，从而停止代码执行。但在ECMAScrip中，任何数值除以0会返回NaN，因此不会影响代码执行。
       特点：任何涉及NaN的操作都会返回NaN。例如，10/NaN 返回NaN
             NaN与任何值都不相等，包括NaN本身。
       alert（NaN == NaN） //false
       isNaN()函数，会帮我们确定参数是否"不是数值".
       alert(isNaN('blue')) //true 它不是数值，无法被转换为数值
       实际上只有0/0会返回NaN，正数除以0会返回Infinity，负数除以0会返回-Infinity
     3.6.4、数值转换
       非数值转换为数值:Number()、parseInt()、parseFloat().第一个函数可以用于任何数据类型，后两个函数用于字符串转换成数值。这三个函数对于同样的输入返回不同的结果
       Number()函数规则:
         如果是Boolean值，true和false分别被转换为1和0
         如果是数字值，只是简单的传入和返回
         如果是null值，返回0
         如果是undefined，返回NaN
         如果是对象，则调用对象的valueOf()方法，然后依照前面的规则转换返回的值。如果转换的结果是NaN，则调用对象的toString()方法，然后依照前面的规则转换字符串值。
         如果是空字符串，返回0
       用parseInt()函数会忽略字符串前面的空格，找到第一个非空字符，如果第一个非空字符不是数字字符或负号，会返回NaN，也就是说parseInt()处理空字符串会返回NaN，parseInt("22.5")返回22，因为小数点不是数字字符或负号，parseInt("123blue")会返回123，blue被忽略。
       parseInt("070")在ECMAScript 5 JavaScript引擎和严格模式中，被认为是十进制70
       可以用parseInt("070",8)指明基数消除误会
       parseFloat()从字符串开头第一个非空字符开始解析，字符串中第一个小数点是有效的，后面的小数点会被忽略parseFloat("22.4.5") // 22.4
       parseFloat()总是会忽略前导0，所以十六进制字符串会被转换为0 parseFloat("0x
       A") // 0 只解析十进制数
   3.7、String类型
     1、字符字面量
       包含一些特殊字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。
       \n  ---换行符
       \t  ---制表
       \b  ---空格
       \r  ---回车
       \f  ---进纸
       \\  ---斜杠
       \'  ---单引号
       \"  ---双引号
       \xnn ---以十六进制代码nn表示的一个字符  \x41 “A”
       \unnnn ---以十六进制代码nnnn表示的一个Unicode字符 \u03a3表示希腊字符
       字符串长度.length
     2、字符串的特点
       字符串一旦创建，他们的值就不能改变。要想改变原来的字符串，就要先销毁它
     3、转换为字符串
       toString()方法
       调用数值的toString()方法可以传递一个参数，输出数值的基数。
       var num = 10;
       num.toString(2); "1010"
       num.toString(); "10"
       在不确定要转换的值是不是null或者undefined的情况下，用String()，能将任何类型的值转换为字符串
       如果值是null，返回“null”
       如果值是undefined，返回"undefined"
       如果值有toString()方法，调用该方法并返回相应的结果
   3.8、Object类型
     对象就是一组数据和功能的集合
     var o = new Object();
     Object的每个实例都具有下列属性和方法:
       constructor:保存着用于创建当前对象的函数。上例中constructor就是Object()
       hasOwnProperty(propertyName):用于检查给定的属性在当前对象实例中是否存在。例如o.hasOwnProperty("name")
       isPropertypeOf(object):用于检查传入的对象是否是传入对象的原型
       propertyIsEnumerable(propertyName):用于检查给定的属性是否能够使用for-in语句枚举。
       toLocaleString():返回对象的字符串表示。该字符串与执行环境的地区对应
       toString():返回对象的字符串表示
       valueOf()：返回对象的字符串、数值或布尔值表示。
4、操作符 
  算数操作符、位操作符、关系操作符、相等操作符
  4.1、一元操作符：只能操作一个值
    4.1.1、递增和递减操作符，有前置型和后置型
    4.1.2、一元加操作符会象Number()转型函数一样对值进行转换。
    var s1 = "01"
    var s2 = "z"
    var o = {
        valueOf:function(){
          return -1
        }
    };
    s1 = +s1 // 1
    s2 = +s2 // NaN
    o = +o // -1
  4.2、位操作符
    NaN和Infinity应用位操作符时，会被当作0处理
    1、按位非(NOT)
      ~ 操作数的负值减一,按位非是在数值表示的最底层执行操作，所以速度最快
      var num = 1;
      var num1 = ~num;
    2、按位与(AND)
      & var result = 2 & 3
    3、按位或(OR)
      | 25 | 3 =27
    4、按位异或(XOR)
      ^ 25 ^ 3 = 26
    5、左移
      << 用0填充，不会影响操作数的符号位
    6、有符号右移
      >> 将数值右移，用符号位的值填充，会保留符号位
    7、无符号右移
      >>> 用0填充，对负数影响大
  4.3、布尔操作符
  非(NOT)、与(AND)、或(OR)
    1、逻辑非
      逻辑非操作符由一个叹号(!)表示，可以应用于ECMAScript中的任何值。无论值是什么数据类型，这个操作符都会返回一个布尔值
      用两个逻辑非操作符会模拟Boolean()转型函数的行为。
      !!"blue"  == Boolean("blue")
    2、逻辑与
      逻辑与操作符由两个和号(&&)表示，可以应用任何数据类型的操作数，不仅仅是布尔值。如果有一个操作数不是布尔值，逻辑与操作就不一定布尔值。
        如果第一个操作数是对象，则返回第二个操作数
        如果第二个操作数是对象，只有在第一个操作数的求值结果为true才返回该对象
        如果两个操作数都是对象，则返回第二个操作数
        如果有一个操作数是null，则返回null
        如果有一个操作数是NaN，则返回NaN
        如果有一个操作数是undefined，则返回undefined
      逻辑与操作属于短路操作，即第一个操作数能确定结果，那么不会对第二个操作数求值
    3、逻辑或
      由两个竖线(||)表示，如果有一个操作数不是布尔值，逻辑或不一定返回布尔值
      逻辑或操作属于短路操作
  4.4、乘性操作符
  乘法、除法、求模，在操作数为非数值的情况下执行自动的类型转换。如果操作数不是数值，后台会自动进行Number()转型函数将其转换为数值。
    1、乘法
      由*表示
      如果乘积超出ECMAScript数值范围，返回Infinity或-Infinity
      如果有一个操作数是NaN，结果是NaN
      如果Infinity与0相乘，则结果是NaN
      如果Infinity与非0数值相乘，结果是Infinity或-Infinity
      Infinity*Infinity == Infinity
    2、除法
      由/表示
      如果有一个操作数是NaN，则结果是NaN
      Infinity / Infinity == NaN
      0 / 0 == NaN
      非零有限数被零除，如 8/0 9/0 10/0，结果是Infinity或-Infinity
      如果是Infinity被任何非零数值除，结果是Infinity或-Infinity
    3、求模
      由%表示
      如果被除数是无限大而除数有限大，则结果是NaN
      被除数是有限大而除数是零，则结果是NaN
      Infinity % Infinity == NaN
      有限大 % 无穷大 == 有限大
      0 % 任何数 == 0
  4.5、加性操作符
    1、加法
      如果两个操作数都是数值，执行常规的加法运算
        如果有一个是NaN，则结果是NaN
        Infinity + Infinity == Infinity
        +0 + +0 == +0
        -0 + -0 == -0
        +0 + -0 == +0
      如果一个操作数是字符串：
        如果两个操作数都是字符串，则拼接两个字符串
        如果只有一个是字符串，将另一个操作数转换为字符串，再拼接起来
        如果由一个操作数是布尔值、对象，则调用toString()方法取得对应的字符串，再拼接起来
  
        var num1 = 5;
        var num2 = 10;
        var result = "the sum is" + num1 + num2; //the sum is 510
        会将num1和num2转换为字符串再拼接
        改正：var result = "the sum is" + (num1 + num2);
    2、减法
      -
      如果由一个操作数是NaN,则返回NaN
      Infinity - Infinity == NaN
      -Infinity - -Infinity == NaN
      Infinity - -Infinity == Infinity
      -Infinity - Infinity == -Infinity
      +0 - +0 == +0
      -0 - -0 == +0
      +0 - -0 == -0
      如果有一个操作数是字符串、布尔值、null或undefined，则先用Number()转换为数值，如果是NaN  ，则返回NaN
      如果有一个操作数是对象，则调用对象的valueOf()方法取得表示该对象的数值。如果没有valueOf()则调用toString()方法，并将字符串转换为数值
  4.6、关系操作符
    < > <= >=
    返回布尔值
    如果两个操作数都是字符串，则比较两个字符串对应的字符编码值
    如果有一个操作数是数值，则将另一个操作数转换为数值
    如果一个操作数是对象，则调用对象的valueOf()或者toString()
    如果一个操作数是布尔值，则将其转换为数值
    如果一个操作数是NaN，返回false
  4.7、相等操作符
    相等和不相等：先转换再比较
    全等和不全等：仅比较不转换
    1、相等和不相等
      == ！=
      如果有一个操作数是布尔值，则先转换为数值再比较
      如果有一个操作数是字符串，另一个是数值，则将字符串转换为数值再比较
      如果有一个操作数是是对象，另一个不是，则调用对象的valueOf()
      null和undefined 是相等的
      要比较相等性，不能将null和undefined转换为其他任何值
      如果有一个操作数是NaN，相等操作符返回false
      如果两个操作数都是对象，则比较她们是不是同一个对象
    2、全等和不全等
      === ！== 不转换操作数
  4.8、条件操作符
    variable = boolean_expression ? ture_value : flase_value;
  4.9、赋值运算符
    =
  4.10、逗号操作符
    可以在一条语句中执行多个操作
    var num = (5,1,2,3) //3
5、语句
  5.1、if语句
    if(condition) statement1 else statement2
    ECMAScript会自动调用Boolean()函数将condition结果转为布尔值。
  5.2、do-while语句
    是一种后测试循环语句，则只有在循环体中的代码执行之后，才会测试出口条件。
    do{
      statement
    }while(expression);
    循环体至少被执行一次
  5.3、while语句
    是一种前测试循环语句，在循环体内的代码被执行之前，就会对出口条件求值。
    while(expression) statement
  5.4、for语句
    是一种前测试循环语句
    ECMAScript不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到
    var count = 10;
    for(var i = 0; i < count; i++){
       alert(i);
    }
    alert(i); // 10
  5.5、for-in语句
    是一种精准的迭代语句，可以用来枚举对象的属性。
    for(property in expression) statement

    for(var propName in window){
        document.write(propName);
    } //显示了BOM中window对象的所有属性
    如果要迭代的对象的变量值为null或undefined，for-in会抛出错误。ECMAScript5更正了这一行为，不再抛出错误，而是不再循环循环体，保证最大限度的兼容性，在使用for-in循环之前，先检测确认该对象的值是不是null 或 undefined
  5.6、label语句
    使用label语句可以在代码中添加标签，以便将来使用。
    label: statement
    start: for(var i = 0; i < count; i++){
        alert(i);
    }
    start标签可以在将来由break或continue语句引用。加标签的语句一般都要与for语句等循环语句配合使用
  5.7、break和continue语句
  5.8、with语句
    with语句的作用是将代码的作用域设置到一个特定的对象中。
    with(expression) statement;
    简化多次编写同一对象的工作
    var qs = location.search.substring(1);
    var hostName = location.hostname;
    var url = location.href;
    可以写成
    with(location){
        var qs = search.substring(1);
        var hostName = hostname;
        var url = href;
    }
    with语句关联了location对象，这意味着在with代码块里，每个变量首先被认为是局部变量
    严格模式下不允许使用with语句，语法错误。
  5.9、switch语句
    switch与if语句关系最为密切，流控制语句。
    switch(expression){
        case value:statement
            break;
        case value:statement
            break;
        default: statement
            break;
    }
    可以在switch语句中使用任何数据类型，每个case的值不一定是常量，可以是变量，甚至是表达式
6、函数
  function functionName(arg0, arg1,...){
      statements
  }
  如果有return返回值，执行完return语句后函数停止并退出，因此位于return后面的代码都永远不会被执行。
  return; 没有任何返回值。函数执行后将返回undefined
  6.1、理解参数
    ECMAScript函数不介意传递进来多少个参数,也不介意传递进来的参数类型，哪怕你定义的函数只接受两个参数，在调用这个函数的时候不一定要传递两个参数，可以是一个两个或者多个。因为参数在内部是一个数组表示，在函数体内可以通过arguments对象来访问这个参数数组。
    "use strict";
    function add(num1, num2){ 
      alert(arguments[0] + arguments[1] + arguments[2]);
    }
    add(80,90,10);

    arguments.length
    arguments对象可以和命名参数一起使用，arguments对象的值永远与对应的命名参数的值保持同步。如果只传入一个参数，arguments[1]的值不会反应到命名参数中。
    arguments对象的长度由传入的参数个数决定，不是由定义函数时的命名参数个数决定的。
    没有传递值的命名参数将自动被赋予undefined值

    function add(num1, num2){ 
      arguments[1] = 10;
      alert(num1+num2  );
    }
    add(80,30); //90

    "use strict"
    function add(num1, num2){ 
      arguments[1] = 10;
      alert(num1+num2  );
    }
    add(80,30); //110
    在严格模式下，重写arguments对象的值代码不会执行
  6.2、没有重载
    签名：接受的参数的类型和数量
    ECMAScript函数没有签名，是因为其参数是包含零个或多个值的数组来表示的。没有签名，就不能做到重载。
    如果定义了两个名字相同的函数，该名字属于后定义的函数。
    